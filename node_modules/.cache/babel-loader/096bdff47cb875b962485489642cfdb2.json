{"ast":null,"code":"var _jsxFileName = \"/Users/cophi/Documents/Projects/minting page/colors/website/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport ColorsCollection from \"./utils/ColorsCollection.json\";\nimport openseaLogo from \"./assets/OS.svg\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"_cophi_\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/colors-7stpthribw\";\nconst TOTAL_MINT_COUNT = 500;\nconst CONTRACT_ADDRESS = \"0x01a1aB765928F0a6C0EFdd5A214A11fAa3B4E3E6\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalMintCount, setTotalMintCount] = useState(0);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    let chainId = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    console.log(\"Connected to chain \" + chainId); // String, hex code of the chainId of the Rinkebey test network\n\n    const rinkebyChainId = \"0x4\";\n\n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    }\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ColorsCollection.abi, signer);\n        let totalMinted = await connectedContract.getTotalNFTsMintedSoFar();\n        setTotalMintCount(totalMinted); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewColorMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n          return;\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ColorsCollection.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeColor();\n        let totalMinted = await connectedContract.getTotalNFTsMintedSoFar();\n        setTotalMintCount(totalMinted);\n        console.log(`Total NFTs Minted: ${totalMinted}`);\n        console.log(\"Minting...please wait.\");\n        setIsLoading(true);\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setIsLoading(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* \n  This runs our function when the page loads.\n   */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // Render Methods\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => isLoading === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    children: \"Minting..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 7\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"colors.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"100% onchain. 100% colors. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [Number(totalMintCount), \"/\", TOTAL_MINT_COUNT, \" NFTs minted so far\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Opensea Logo\",\n          className: \"opensea-logo\",\n          src: openseaLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: OPENSEA_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"colors.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"QXu7d8nkb6fb+U/gXiOqZBSYMvo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["twitterLogo","React","useEffect","useState","ethers","ColorsCollection","openseaLogo","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","totalMintCount","setTotalMintCount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","chainId","rinkebyChainId","alert","length","account","setupEventListener","connectWallet","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","totalMinted","getTotalNFTsMintedSoFar","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeColor","wait","hash","renderNotConnectedContainer","renderMintUI","Number"],"sources":["/Users/cophi/Documents/Projects/minting page/colors/website/src/App.js"],"sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport ColorsCollection from \"./utils/ColorsCollection.json\";\nimport openseaLogo from \"./assets/OS.svg\";\n\n// Constants\nconst TWITTER_HANDLE = \"_cophi_\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/colors-7stpthribw\";\nconst TOTAL_MINT_COUNT = 500;\n\nconst CONTRACT_ADDRESS = \"0x01a1aB765928F0a6C0EFdd5A214A11fAa3B4E3E6\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalMintCount, setTotalMintCount] = useState(0);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    let chainId = await ethereum.request({ method: \"eth_chainId\" });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Rinkebey test network\n    const rinkebyChainId = \"0x4\";\n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    }\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          ColorsCollection.abi,\n          signer\n        );\n\n        let totalMinted = await connectedContract.getTotalNFTsMintedSoFar();\n        setTotalMintCount(totalMinted);\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewColorMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n          return;\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          ColorsCollection.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeColor();\n\n        let totalMinted = await connectedContract.getTotalNFTsMintedSoFar();\n        setTotalMintCount(totalMinted);\n        console.log(`Total NFTs Minted: ${totalMinted}`);\n\n        console.log(\"Minting...please wait.\");\n        setIsLoading(true);\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setIsLoading(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* \n  This runs our function when the page loads.\n   */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () =>\n    isLoading === true ? (\n      <button className=\"cta-button connect-wallet-button\">Minting..</button>\n    ) : (\n      <button\n        onClick={askContractToMintNft}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Mint NFT\n      </button>\n    );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">colors.</p>\n          <p className=\"sub-text\">100% onchain. 100% colors. </p>\n          <p>\n            {Number(totalMintCount)}/{TOTAL_MINT_COUNT} NFTs minted so far\n          </p>\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`by @${TWITTER_HANDLE}`}</a>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Opensea Logo\" className=\"opensea-logo\" src={openseaLogo} />\n          <a\n            className=\"footer-text\"\n            href={OPENSEA_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            colors.\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}